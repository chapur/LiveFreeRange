#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LiveFreeRange.DataAccess.Linq
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="LiveFreeRange")]
	public partial class LiveFreeRangeDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAddress(Address instance);
    partial void UpdateAddress(Address instance);
    partial void DeleteAddress(Address instance);
    partial void InsertSubCategory(SubCategory instance);
    partial void UpdateSubCategory(SubCategory instance);
    partial void DeleteSubCategory(SubCategory instance);
    partial void InsertContactInformation(ContactInformation instance);
    partial void UpdateContactInformation(ContactInformation instance);
    partial void DeleteContactInformation(ContactInformation instance);
    partial void InsertEndUser(EndUser instance);
    partial void UpdateEndUser(EndUser instance);
    partial void DeleteEndUser(EndUser instance);
    partial void InsertEndUserType(EndUserType instance);
    partial void UpdateEndUserType(EndUserType instance);
    partial void DeleteEndUserType(EndUserType instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderStatus(OrderStatus instance);
    partial void UpdateOrderStatus(OrderStatus instance);
    partial void DeleteOrderStatus(OrderStatus instance);
    partial void InsertProductCategory(ProductCategory instance);
    partial void UpdateProductCategory(ProductCategory instance);
    partial void DeleteProductCategory(ProductCategory instance);
    partial void InsertProductColour(ProductColour instance);
    partial void UpdateProductColour(ProductColour instance);
    partial void DeleteProductColour(ProductColour instance);
    partial void InsertProductImage(ProductImage instance);
    partial void UpdateProductImage(ProductImage instance);
    partial void DeleteProductImage(ProductImage instance);
    partial void InsertProduct(Product instance);
    partial void UpdateProduct(Product instance);
    partial void DeleteProduct(Product instance);
    partial void InsertProductSize(ProductSize instance);
    partial void UpdateProductSize(ProductSize instance);
    partial void DeleteProductSize(ProductSize instance);
    partial void InsertProductWeight(ProductWeight instance);
    partial void UpdateProductWeight(ProductWeight instance);
    partial void DeleteProductWeight(ProductWeight instance);
    partial void InsertShoppingCart(ShoppingCart instance);
    partial void UpdateShoppingCart(ShoppingCart instance);
    partial void DeleteShoppingCart(ShoppingCart instance);
    partial void InsertShowcase(Showcase instance);
    partial void UpdateShowcase(Showcase instance);
    partial void DeleteShowcase(Showcase instance);
    #endregion
		
		public LiveFreeRangeDataContext() : 
				base(global::LiveFreeRange.DataAccess.Properties.Settings.Default.LiveFreeRangeConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LiveFreeRangeDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LiveFreeRangeDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LiveFreeRangeDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LiveFreeRangeDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Address> Addresses
		{
			get
			{
				return this.GetTable<Address>();
			}
		}
		
		public System.Data.Linq.Table<SubCategory> SubCategories
		{
			get
			{
				return this.GetTable<SubCategory>();
			}
		}
		
		public System.Data.Linq.Table<ContactInformation> ContactInformations
		{
			get
			{
				return this.GetTable<ContactInformation>();
			}
		}
		
		public System.Data.Linq.Table<EndUser> EndUsers
		{
			get
			{
				return this.GetTable<EndUser>();
			}
		}
		
		public System.Data.Linq.Table<EndUserType> EndUserTypes
		{
			get
			{
				return this.GetTable<EndUserType>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderStatus> OrderStatus
		{
			get
			{
				return this.GetTable<OrderStatus>();
			}
		}
		
		public System.Data.Linq.Table<ProductCategory> ProductCategories
		{
			get
			{
				return this.GetTable<ProductCategory>();
			}
		}
		
		public System.Data.Linq.Table<ProductColour> ProductColours
		{
			get
			{
				return this.GetTable<ProductColour>();
			}
		}
		
		public System.Data.Linq.Table<ProductImage> ProductImages
		{
			get
			{
				return this.GetTable<ProductImage>();
			}
		}
		
		public System.Data.Linq.Table<Product> Products
		{
			get
			{
				return this.GetTable<Product>();
			}
		}
		
		public System.Data.Linq.Table<ProductSize> ProductSizes
		{
			get
			{
				return this.GetTable<ProductSize>();
			}
		}
		
		public System.Data.Linq.Table<ProductSizeLink> ProductSizeLinks
		{
			get
			{
				return this.GetTable<ProductSizeLink>();
			}
		}
		
		public System.Data.Linq.Table<ProductWeight> ProductWeights
		{
			get
			{
				return this.GetTable<ProductWeight>();
			}
		}
		
		public System.Data.Linq.Table<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this.GetTable<ShoppingCart>();
			}
		}
		
		public System.Data.Linq.Table<Showcase> Showcases
		{
			get
			{
				return this.GetTable<Showcase>();
			}
		}
	}
	
	[Table(Name="dbo.Address")]
	public partial class Address : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AddressId;
		
		private string _AddressLine;
		
		private string _AddressLine2;
		
		private string _City;
		
		private string _PostalCode;
		
		private EntitySet<EndUser> _EndUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnAddressLineChanging(string value);
    partial void OnAddressLineChanged();
    partial void OnAddressLine2Changing(string value);
    partial void OnAddressLine2Changed();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnPostalCodeChanging(string value);
    partial void OnPostalCodeChanged();
    #endregion
		
		public Address()
		{
			this._EndUsers = new EntitySet<EndUser>(new Action<EndUser>(this.attach_EndUsers), new Action<EndUser>(this.detach_EndUsers));
			OnCreated();
		}
		
		[Column(Storage="_AddressId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[Column(Storage="_AddressLine", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string AddressLine
		{
			get
			{
				return this._AddressLine;
			}
			set
			{
				if ((this._AddressLine != value))
				{
					this.OnAddressLineChanging(value);
					this.SendPropertyChanging();
					this._AddressLine = value;
					this.SendPropertyChanged("AddressLine");
					this.OnAddressLineChanged();
				}
			}
		}
		
		[Column(Storage="_AddressLine2", DbType="NVarChar(50)")]
		public string AddressLine2
		{
			get
			{
				return this._AddressLine2;
			}
			set
			{
				if ((this._AddressLine2 != value))
				{
					this.OnAddressLine2Changing(value);
					this.SendPropertyChanging();
					this._AddressLine2 = value;
					this.SendPropertyChanged("AddressLine2");
					this.OnAddressLine2Changed();
				}
			}
		}
		
		[Column(Storage="_City", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[Column(Storage="_PostalCode", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string PostalCode
		{
			get
			{
				return this._PostalCode;
			}
			set
			{
				if ((this._PostalCode != value))
				{
					this.OnPostalCodeChanging(value);
					this.SendPropertyChanging();
					this._PostalCode = value;
					this.SendPropertyChanged("PostalCode");
					this.OnPostalCodeChanged();
				}
			}
		}
		
		[Association(Name="Address_EndUser", Storage="_EndUsers", ThisKey="AddressId", OtherKey="AddressId")]
		public EntitySet<EndUser> EndUsers
		{
			get
			{
				return this._EndUsers;
			}
			set
			{
				this._EndUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EndUsers(EndUser entity)
		{
			this.SendPropertyChanging();
			entity.Address = this;
		}
		
		private void detach_EndUsers(EndUser entity)
		{
			this.SendPropertyChanging();
			entity.Address = null;
		}
	}
	
	[Table(Name="dbo.SubCategory")]
	public partial class SubCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SubCategoryId;
		
		private string _SubCategoryName;
		
		private string _SubCategoryDisplayName;
		
		private int _ProductCategoryId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCategoryIdChanging(int value);
    partial void OnSubCategoryIdChanged();
    partial void OnSubCategoryNameChanging(string value);
    partial void OnSubCategoryNameChanged();
    partial void OnSubCategoryDisplayNameChanging(string value);
    partial void OnSubCategoryDisplayNameChanged();
    partial void OnProductCategoryIdChanging(int value);
    partial void OnProductCategoryIdChanged();
    #endregion
		
		public SubCategory()
		{
			OnCreated();
		}
		
		[Column(Storage="_SubCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SubCategoryId
		{
			get
			{
				return this._SubCategoryId;
			}
			set
			{
				if ((this._SubCategoryId != value))
				{
					this.OnSubCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryId = value;
					this.SendPropertyChanged("SubCategoryId");
					this.OnSubCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubCategoryName
		{
			get
			{
				return this._SubCategoryName;
			}
			set
			{
				if ((this._SubCategoryName != value))
				{
					this.OnSubCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryName = value;
					this.SendPropertyChanged("SubCategoryName");
					this.OnSubCategoryNameChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryDisplayName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string SubCategoryDisplayName
		{
			get
			{
				return this._SubCategoryDisplayName;
			}
			set
			{
				if ((this._SubCategoryDisplayName != value))
				{
					this.OnSubCategoryDisplayNameChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryDisplayName = value;
					this.SendPropertyChanged("SubCategoryDisplayName");
					this.OnSubCategoryDisplayNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCategoryId", DbType="Int NOT NULL")]
		public int ProductCategoryId
		{
			get
			{
				return this._ProductCategoryId;
			}
			set
			{
				if ((this._ProductCategoryId != value))
				{
					this.OnProductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryId = value;
					this.SendPropertyChanged("ProductCategoryId");
					this.OnProductCategoryIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.ContactInformation")]
	public partial class ContactInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ContactInformationId;
		
		private string _Phone;
		
		private string _Phone2;
		
		private string _Fax;
		
		private string _Email;
		
		private EntitySet<EndUser> _EndUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnContactInformationIdChanging(int value);
    partial void OnContactInformationIdChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnPhone2Changing(string value);
    partial void OnPhone2Changed();
    partial void OnFaxChanging(string value);
    partial void OnFaxChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    #endregion
		
		public ContactInformation()
		{
			this._EndUsers = new EntitySet<EndUser>(new Action<EndUser>(this.attach_EndUsers), new Action<EndUser>(this.detach_EndUsers));
			OnCreated();
		}
		
		[Column(Storage="_ContactInformationId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ContactInformationId
		{
			get
			{
				return this._ContactInformationId;
			}
			set
			{
				if ((this._ContactInformationId != value))
				{
					this.OnContactInformationIdChanging(value);
					this.SendPropertyChanging();
					this._ContactInformationId = value;
					this.SendPropertyChanged("ContactInformationId");
					this.OnContactInformationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Phone2", DbType="NVarChar(50)")]
		public string Phone2
		{
			get
			{
				return this._Phone2;
			}
			set
			{
				if ((this._Phone2 != value))
				{
					this.OnPhone2Changing(value);
					this.SendPropertyChanging();
					this._Phone2 = value;
					this.SendPropertyChanged("Phone2");
					this.OnPhone2Changed();
				}
			}
		}
		
		[Column(Storage="_Fax", DbType="NVarChar(50)")]
		public string Fax
		{
			get
			{
				return this._Fax;
			}
			set
			{
				if ((this._Fax != value))
				{
					this.OnFaxChanging(value);
					this.SendPropertyChanging();
					this._Fax = value;
					this.SendPropertyChanged("Fax");
					this.OnFaxChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Association(Name="ContactInformation_EndUser", Storage="_EndUsers", ThisKey="ContactInformationId", OtherKey="ContactInformationId")]
		public EntitySet<EndUser> EndUsers
		{
			get
			{
				return this._EndUsers;
			}
			set
			{
				this._EndUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EndUsers(EndUser entity)
		{
			this.SendPropertyChanging();
			entity.ContactInformation = this;
		}
		
		private void detach_EndUsers(EndUser entity)
		{
			this.SendPropertyChanging();
			entity.ContactInformation = null;
		}
	}
	
	[Table(Name="dbo.EndUser")]
	public partial class EndUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EndUserId;
		
		private int _EndUserTypeId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _AddressId;
		
		private int _ContactInformationId;
		
		private string _Password;
		
		private bool _IsSubscribed;
		
		private EntityRef<Address> _Address;
		
		private EntityRef<ContactInformation> _ContactInformation;
		
		private EntityRef<EndUserType> _EndUserType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEndUserIdChanging(int value);
    partial void OnEndUserIdChanged();
    partial void OnEndUserTypeIdChanging(int value);
    partial void OnEndUserTypeIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAddressIdChanging(int value);
    partial void OnAddressIdChanged();
    partial void OnContactInformationIdChanging(int value);
    partial void OnContactInformationIdChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIsSubscribedChanging(bool value);
    partial void OnIsSubscribedChanged();
    #endregion
		
		public EndUser()
		{
			this._Address = default(EntityRef<Address>);
			this._ContactInformation = default(EntityRef<ContactInformation>);
			this._EndUserType = default(EntityRef<EndUserType>);
			OnCreated();
		}
		
		[Column(Storage="_EndUserId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EndUserId
		{
			get
			{
				return this._EndUserId;
			}
			set
			{
				if ((this._EndUserId != value))
				{
					this.OnEndUserIdChanging(value);
					this.SendPropertyChanging();
					this._EndUserId = value;
					this.SendPropertyChanged("EndUserId");
					this.OnEndUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_EndUserTypeId", DbType="Int NOT NULL")]
		public int EndUserTypeId
		{
			get
			{
				return this._EndUserTypeId;
			}
			set
			{
				if ((this._EndUserTypeId != value))
				{
					if (this._EndUserType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEndUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EndUserTypeId = value;
					this.SendPropertyChanged("EndUserTypeId");
					this.OnEndUserTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_AddressId", DbType="Int NOT NULL")]
		public int AddressId
		{
			get
			{
				return this._AddressId;
			}
			set
			{
				if ((this._AddressId != value))
				{
					if (this._Address.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAddressIdChanging(value);
					this.SendPropertyChanging();
					this._AddressId = value;
					this.SendPropertyChanged("AddressId");
					this.OnAddressIdChanged();
				}
			}
		}
		
		[Column(Storage="_ContactInformationId", DbType="Int NOT NULL")]
		public int ContactInformationId
		{
			get
			{
				return this._ContactInformationId;
			}
			set
			{
				if ((this._ContactInformationId != value))
				{
					if (this._ContactInformation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactInformationIdChanging(value);
					this.SendPropertyChanging();
					this._ContactInformationId = value;
					this.SendPropertyChanged("ContactInformationId");
					this.OnContactInformationIdChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_IsSubscribed", DbType="Bit NOT NULL")]
		public bool IsSubscribed
		{
			get
			{
				return this._IsSubscribed;
			}
			set
			{
				if ((this._IsSubscribed != value))
				{
					this.OnIsSubscribedChanging(value);
					this.SendPropertyChanging();
					this._IsSubscribed = value;
					this.SendPropertyChanged("IsSubscribed");
					this.OnIsSubscribedChanged();
				}
			}
		}
		
		[Association(Name="Address_EndUser", Storage="_Address", ThisKey="AddressId", OtherKey="AddressId", IsForeignKey=true)]
		public Address Address
		{
			get
			{
				return this._Address.Entity;
			}
			set
			{
				Address previousValue = this._Address.Entity;
				if (((previousValue != value) 
							|| (this._Address.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Address.Entity = null;
						previousValue.EndUsers.Remove(this);
					}
					this._Address.Entity = value;
					if ((value != null))
					{
						value.EndUsers.Add(this);
						this._AddressId = value.AddressId;
					}
					else
					{
						this._AddressId = default(int);
					}
					this.SendPropertyChanged("Address");
				}
			}
		}
		
		[Association(Name="ContactInformation_EndUser", Storage="_ContactInformation", ThisKey="ContactInformationId", OtherKey="ContactInformationId", IsForeignKey=true)]
		public ContactInformation ContactInformation
		{
			get
			{
				return this._ContactInformation.Entity;
			}
			set
			{
				ContactInformation previousValue = this._ContactInformation.Entity;
				if (((previousValue != value) 
							|| (this._ContactInformation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ContactInformation.Entity = null;
						previousValue.EndUsers.Remove(this);
					}
					this._ContactInformation.Entity = value;
					if ((value != null))
					{
						value.EndUsers.Add(this);
						this._ContactInformationId = value.ContactInformationId;
					}
					else
					{
						this._ContactInformationId = default(int);
					}
					this.SendPropertyChanged("ContactInformation");
				}
			}
		}
		
		[Association(Name="EndUserType_EndUser", Storage="_EndUserType", ThisKey="EndUserTypeId", OtherKey="EndUserTypeId", IsForeignKey=true)]
		public EndUserType EndUserType
		{
			get
			{
				return this._EndUserType.Entity;
			}
			set
			{
				EndUserType previousValue = this._EndUserType.Entity;
				if (((previousValue != value) 
							|| (this._EndUserType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EndUserType.Entity = null;
						previousValue.EndUsers.Remove(this);
					}
					this._EndUserType.Entity = value;
					if ((value != null))
					{
						value.EndUsers.Add(this);
						this._EndUserTypeId = value.EndUserTypeId;
					}
					else
					{
						this._EndUserTypeId = default(int);
					}
					this.SendPropertyChanged("EndUserType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.EndUserType")]
	public partial class EndUserType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EndUserTypeId;
		
		private string _TypeName;
		
		private EntitySet<EndUser> _EndUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEndUserTypeIdChanging(int value);
    partial void OnEndUserTypeIdChanged();
    partial void OnTypeNameChanging(string value);
    partial void OnTypeNameChanged();
    #endregion
		
		public EndUserType()
		{
			this._EndUsers = new EntitySet<EndUser>(new Action<EndUser>(this.attach_EndUsers), new Action<EndUser>(this.detach_EndUsers));
			OnCreated();
		}
		
		[Column(Storage="_EndUserTypeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EndUserTypeId
		{
			get
			{
				return this._EndUserTypeId;
			}
			set
			{
				if ((this._EndUserTypeId != value))
				{
					this.OnEndUserTypeIdChanging(value);
					this.SendPropertyChanging();
					this._EndUserTypeId = value;
					this.SendPropertyChanged("EndUserTypeId");
					this.OnEndUserTypeIdChanged();
				}
			}
		}
		
		[Column(Storage="_TypeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TypeName
		{
			get
			{
				return this._TypeName;
			}
			set
			{
				if ((this._TypeName != value))
				{
					this.OnTypeNameChanging(value);
					this.SendPropertyChanging();
					this._TypeName = value;
					this.SendPropertyChanged("TypeName");
					this.OnTypeNameChanged();
				}
			}
		}
		
		[Association(Name="EndUserType_EndUser", Storage="_EndUsers", ThisKey="EndUserTypeId", OtherKey="EndUserTypeId")]
		public EntitySet<EndUser> EndUsers
		{
			get
			{
				return this._EndUsers;
			}
			set
			{
				this._EndUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EndUsers(EndUser entity)
		{
			this.SendPropertyChanging();
			entity.EndUserType = this;
		}
		
		private void detach_EndUsers(EndUser entity)
		{
			this.SendPropertyChanging();
			entity.EndUserType = null;
		}
	}
	
	[Table(Name="dbo.OrderDetails")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderDetailId;
		
		private int _OrderId;
		
		private int _ProductId;
		
		private int _Quantity;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIdChanging(int value);
    partial void OnOrderDetailIdChanged();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public OrderDetail()
		{
			OnCreated();
		}
		
		[Column(Storage="_OrderDetailId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderDetailId
		{
			get
			{
				return this._OrderDetailId;
			}
			set
			{
				if ((this._OrderDetailId != value))
				{
					this.OnOrderDetailIdChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailId = value;
					this.SendPropertyChanged("OrderDetailId");
					this.OnOrderDetailIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderId", DbType="Int NOT NULL")]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Orders")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderId;
		
		private string _TransactionId;
		
		private int _EndUserId;
		
		private int _OrderStatusId;
		
		private System.DateTime _OrderDate;
		
		private System.Nullable<System.DateTime> _ShipDate;
		
		private string _TrackingNumber;
		
		private EntityRef<OrderStatus> _OrderStatus;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIdChanging(int value);
    partial void OnOrderIdChanged();
    partial void OnTransactionIdChanging(string value);
    partial void OnTransactionIdChanged();
    partial void OnEndUserIdChanging(int value);
    partial void OnEndUserIdChanged();
    partial void OnOrderStatusIdChanging(int value);
    partial void OnOrderStatusIdChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnShipDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShipDateChanged();
    partial void OnTrackingNumberChanging(string value);
    partial void OnTrackingNumberChanged();
    #endregion
		
		public Order()
		{
			this._OrderStatus = default(EntityRef<OrderStatus>);
			OnCreated();
		}
		
		[Column(Storage="_OrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderId
		{
			get
			{
				return this._OrderId;
			}
			set
			{
				if ((this._OrderId != value))
				{
					this.OnOrderIdChanging(value);
					this.SendPropertyChanging();
					this._OrderId = value;
					this.SendPropertyChanged("OrderId");
					this.OnOrderIdChanged();
				}
			}
		}
		
		[Column(Storage="_TransactionId", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string TransactionId
		{
			get
			{
				return this._TransactionId;
			}
			set
			{
				if ((this._TransactionId != value))
				{
					this.OnTransactionIdChanging(value);
					this.SendPropertyChanging();
					this._TransactionId = value;
					this.SendPropertyChanged("TransactionId");
					this.OnTransactionIdChanged();
				}
			}
		}
		
		[Column(Storage="_EndUserId", DbType="Int NOT NULL")]
		public int EndUserId
		{
			get
			{
				return this._EndUserId;
			}
			set
			{
				if ((this._EndUserId != value))
				{
					this.OnEndUserIdChanging(value);
					this.SendPropertyChanging();
					this._EndUserId = value;
					this.SendPropertyChanged("EndUserId");
					this.OnEndUserIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusId", DbType="Int NOT NULL")]
		public int OrderStatusId
		{
			get
			{
				return this._OrderStatusId;
			}
			set
			{
				if ((this._OrderStatusId != value))
				{
					if (this._OrderStatus.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusId = value;
					this.SendPropertyChanged("OrderStatusId");
					this.OnOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="SmallDateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_ShipDate", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> ShipDate
		{
			get
			{
				return this._ShipDate;
			}
			set
			{
				if ((this._ShipDate != value))
				{
					this.OnShipDateChanging(value);
					this.SendPropertyChanging();
					this._ShipDate = value;
					this.SendPropertyChanged("ShipDate");
					this.OnShipDateChanged();
				}
			}
		}
		
		[Column(Storage="_TrackingNumber", DbType="NVarChar(50)")]
		public string TrackingNumber
		{
			get
			{
				return this._TrackingNumber;
			}
			set
			{
				if ((this._TrackingNumber != value))
				{
					this.OnTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._TrackingNumber = value;
					this.SendPropertyChanged("TrackingNumber");
					this.OnTrackingNumberChanged();
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_OrderStatus", ThisKey="OrderStatusId", OtherKey="OrderStatusId", IsForeignKey=true)]
		public OrderStatus OrderStatus
		{
			get
			{
				return this._OrderStatus.Entity;
			}
			set
			{
				OrderStatus previousValue = this._OrderStatus.Entity;
				if (((previousValue != value) 
							|| (this._OrderStatus.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderStatus.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._OrderStatus.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._OrderStatusId = value.OrderStatusId;
					}
					else
					{
						this._OrderStatusId = default(int);
					}
					this.SendPropertyChanged("OrderStatus");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.OrderStatus")]
	public partial class OrderStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OrderStatusId;
		
		private string _OrderStatusName;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderStatusIdChanging(int value);
    partial void OnOrderStatusIdChanged();
    partial void OnOrderStatusNameChanging(string value);
    partial void OnOrderStatusNameChanged();
    #endregion
		
		public OrderStatus()
		{
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[Column(Storage="_OrderStatusId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OrderStatusId
		{
			get
			{
				return this._OrderStatusId;
			}
			set
			{
				if ((this._OrderStatusId != value))
				{
					this.OnOrderStatusIdChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusId = value;
					this.SendPropertyChanged("OrderStatusId");
					this.OnOrderStatusIdChanged();
				}
			}
		}
		
		[Column(Storage="_OrderStatusName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string OrderStatusName
		{
			get
			{
				return this._OrderStatusName;
			}
			set
			{
				if ((this._OrderStatusName != value))
				{
					this.OnOrderStatusNameChanging(value);
					this.SendPropertyChanging();
					this._OrderStatusName = value;
					this.SendPropertyChanged("OrderStatusName");
					this.OnOrderStatusNameChanged();
				}
			}
		}
		
		[Association(Name="OrderStatus_Order", Storage="_Orders", ThisKey="OrderStatusId", OtherKey="OrderStatusId")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.OrderStatus = null;
		}
	}
	
	[Table(Name="dbo.ProductCategory")]
	public partial class ProductCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductCategoryId;
		
		private string _ProductCategoryName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductCategoryIdChanging(int value);
    partial void OnProductCategoryIdChanged();
    partial void OnProductCategoryNameChanging(string value);
    partial void OnProductCategoryNameChanged();
    #endregion
		
		public ProductCategory()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ProductCategoryId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductCategoryId
		{
			get
			{
				return this._ProductCategoryId;
			}
			set
			{
				if ((this._ProductCategoryId != value))
				{
					this.OnProductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryId = value;
					this.SendPropertyChanged("ProductCategoryId");
					this.OnProductCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCategoryName", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string ProductCategoryName
		{
			get
			{
				return this._ProductCategoryName;
			}
			set
			{
				if ((this._ProductCategoryName != value))
				{
					this.OnProductCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryName = value;
					this.SendPropertyChanged("ProductCategoryName");
					this.OnProductCategoryNameChanged();
				}
			}
		}
		
		[Association(Name="ProductCategory_Product", Storage="_Products", ThisKey="ProductCategoryId", OtherKey="ProductCategoryId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductCategory = null;
		}
	}
	
	[Table(Name="dbo.ProductColour")]
	public partial class ProductColour : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductColourId;
		
		private string _ProductColourName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductColourIdChanging(int value);
    partial void OnProductColourIdChanged();
    partial void OnProductColourNameChanging(string value);
    partial void OnProductColourNameChanged();
    #endregion
		
		public ProductColour()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ProductColourId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductColourId
		{
			get
			{
				return this._ProductColourId;
			}
			set
			{
				if ((this._ProductColourId != value))
				{
					this.OnProductColourIdChanging(value);
					this.SendPropertyChanging();
					this._ProductColourId = value;
					this.SendPropertyChanged("ProductColourId");
					this.OnProductColourIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductColourName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductColourName
		{
			get
			{
				return this._ProductColourName;
			}
			set
			{
				if ((this._ProductColourName != value))
				{
					this.OnProductColourNameChanging(value);
					this.SendPropertyChanging();
					this._ProductColourName = value;
					this.SendPropertyChanged("ProductColourName");
					this.OnProductColourNameChanged();
				}
			}
		}
		
		[Association(Name="ProductColour_Product", Storage="_Products", ThisKey="ProductColourId", OtherKey="ColourId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductColour = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductColour = null;
		}
	}
	
	[Table(Name="dbo.ProductImages")]
	public partial class ProductImage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductImageId;
		
		private string _ProductImageUrl;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductImageIdChanging(int value);
    partial void OnProductImageIdChanged();
    partial void OnProductImageUrlChanging(string value);
    partial void OnProductImageUrlChanged();
    #endregion
		
		public ProductImage()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ProductImageId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductImageId
		{
			get
			{
				return this._ProductImageId;
			}
			set
			{
				if ((this._ProductImageId != value))
				{
					this.OnProductImageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductImageId = value;
					this.SendPropertyChanged("ProductImageId");
					this.OnProductImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductImageUrl", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductImageUrl
		{
			get
			{
				return this._ProductImageUrl;
			}
			set
			{
				if ((this._ProductImageUrl != value))
				{
					this.OnProductImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ProductImageUrl = value;
					this.SendPropertyChanged("ProductImageUrl");
					this.OnProductImageUrlChanged();
				}
			}
		}
		
		[Association(Name="ProductImage_Product", Storage="_Products", ThisKey="ProductImageId", OtherKey="ProductImageId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductImage = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductImage = null;
		}
	}
	
	[Table(Name="dbo.Products")]
	public partial class Product : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductId;
		
		private int _ProductCategoryId;
		
		private int _SubCategoryId;
		
		private string _ProductName;
		
		private int _ProductImageId;
		
		private string _Description;
		
		private decimal _Price;
		
		private int _ColourId;
		
		private System.Nullable<int> _SizeId;
		
		private int _WeightId;
		
		private string _StockLevel;
		
		private EntitySet<ShoppingCart> _ShoppingCarts;
		
		private EntitySet<Showcase> _Showcases;
		
		private EntityRef<ProductCategory> _ProductCategory;
		
		private EntityRef<ProductColour> _ProductColour;
		
		private EntityRef<ProductImage> _ProductImage;
		
		private EntityRef<ProductSize> _ProductSize;
		
		private EntityRef<ProductWeight> _ProductWeight;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnProductCategoryIdChanging(int value);
    partial void OnProductCategoryIdChanged();
    partial void OnSubCategoryIdChanging(int value);
    partial void OnSubCategoryIdChanged();
    partial void OnProductNameChanging(string value);
    partial void OnProductNameChanged();
    partial void OnProductImageIdChanging(int value);
    partial void OnProductImageIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPriceChanging(decimal value);
    partial void OnPriceChanged();
    partial void OnColourIdChanging(int value);
    partial void OnColourIdChanged();
    partial void OnSizeIdChanging(System.Nullable<int> value);
    partial void OnSizeIdChanged();
    partial void OnWeightIdChanging(int value);
    partial void OnWeightIdChanged();
    partial void OnStockLevelChanging(string value);
    partial void OnStockLevelChanged();
    #endregion
		
		public Product()
		{
			this._ShoppingCarts = new EntitySet<ShoppingCart>(new Action<ShoppingCart>(this.attach_ShoppingCarts), new Action<ShoppingCart>(this.detach_ShoppingCarts));
			this._Showcases = new EntitySet<Showcase>(new Action<Showcase>(this.attach_Showcases), new Action<Showcase>(this.detach_Showcases));
			this._ProductCategory = default(EntityRef<ProductCategory>);
			this._ProductColour = default(EntityRef<ProductColour>);
			this._ProductImage = default(EntityRef<ProductImage>);
			this._ProductSize = default(EntityRef<ProductSize>);
			this._ProductWeight = default(EntityRef<ProductWeight>);
			OnCreated();
		}
		
		[Column(Storage="_ProductId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductCategoryId", DbType="Int NOT NULL")]
		public int ProductCategoryId
		{
			get
			{
				return this._ProductCategoryId;
			}
			set
			{
				if ((this._ProductCategoryId != value))
				{
					if (this._ProductCategory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._ProductCategoryId = value;
					this.SendPropertyChanged("ProductCategoryId");
					this.OnProductCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_SubCategoryId", DbType="Int NOT NULL")]
		public int SubCategoryId
		{
			get
			{
				return this._SubCategoryId;
			}
			set
			{
				if ((this._SubCategoryId != value))
				{
					this.OnSubCategoryIdChanging(value);
					this.SendPropertyChanging();
					this._SubCategoryId = value;
					this.SendPropertyChanged("SubCategoryId");
					this.OnSubCategoryIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductName
		{
			get
			{
				return this._ProductName;
			}
			set
			{
				if ((this._ProductName != value))
				{
					this.OnProductNameChanging(value);
					this.SendPropertyChanging();
					this._ProductName = value;
					this.SendPropertyChanged("ProductName");
					this.OnProductNameChanged();
				}
			}
		}
		
		[Column(Storage="_ProductImageId", DbType="Int NOT NULL")]
		public int ProductImageId
		{
			get
			{
				return this._ProductImageId;
			}
			set
			{
				if ((this._ProductImageId != value))
				{
					if (this._ProductImage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductImageIdChanging(value);
					this.SendPropertyChanging();
					this._ProductImageId = value;
					this.SendPropertyChanged("ProductImageId");
					this.OnProductImageIdChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Price", DbType="SmallMoney NOT NULL")]
		public decimal Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[Column(Storage="_ColourId", DbType="Int NOT NULL")]
		public int ColourId
		{
			get
			{
				return this._ColourId;
			}
			set
			{
				if ((this._ColourId != value))
				{
					if (this._ProductColour.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnColourIdChanging(value);
					this.SendPropertyChanging();
					this._ColourId = value;
					this.SendPropertyChanged("ColourId");
					this.OnColourIdChanged();
				}
			}
		}
		
		[Column(Storage="_SizeId", DbType="Int")]
		public System.Nullable<int> SizeId
		{
			get
			{
				return this._SizeId;
			}
			set
			{
				if ((this._SizeId != value))
				{
					if (this._ProductSize.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSizeIdChanging(value);
					this.SendPropertyChanging();
					this._SizeId = value;
					this.SendPropertyChanged("SizeId");
					this.OnSizeIdChanged();
				}
			}
		}
		
		[Column(Storage="_WeightId", DbType="Int NOT NULL")]
		public int WeightId
		{
			get
			{
				return this._WeightId;
			}
			set
			{
				if ((this._WeightId != value))
				{
					if (this._ProductWeight.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWeightIdChanging(value);
					this.SendPropertyChanging();
					this._WeightId = value;
					this.SendPropertyChanged("WeightId");
					this.OnWeightIdChanged();
				}
			}
		}
		
		[Column(Storage="_StockLevel", DbType="NVarChar(50)")]
		public string StockLevel
		{
			get
			{
				return this._StockLevel;
			}
			set
			{
				if ((this._StockLevel != value))
				{
					this.OnStockLevelChanging(value);
					this.SendPropertyChanging();
					this._StockLevel = value;
					this.SendPropertyChanged("StockLevel");
					this.OnStockLevelChanged();
				}
			}
		}
		
		[Association(Name="Product_ShoppingCart", Storage="_ShoppingCarts", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<ShoppingCart> ShoppingCarts
		{
			get
			{
				return this._ShoppingCarts;
			}
			set
			{
				this._ShoppingCarts.Assign(value);
			}
		}
		
		[Association(Name="Product_Showcase", Storage="_Showcases", ThisKey="ProductId", OtherKey="ProductId")]
		public EntitySet<Showcase> Showcases
		{
			get
			{
				return this._Showcases;
			}
			set
			{
				this._Showcases.Assign(value);
			}
		}
		
		[Association(Name="ProductCategory_Product", Storage="_ProductCategory", ThisKey="ProductCategoryId", OtherKey="ProductCategoryId", IsForeignKey=true)]
		public ProductCategory ProductCategory
		{
			get
			{
				return this._ProductCategory.Entity;
			}
			set
			{
				ProductCategory previousValue = this._ProductCategory.Entity;
				if (((previousValue != value) 
							|| (this._ProductCategory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductCategory.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductCategory.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductCategoryId = value.ProductCategoryId;
					}
					else
					{
						this._ProductCategoryId = default(int);
					}
					this.SendPropertyChanged("ProductCategory");
				}
			}
		}
		
		[Association(Name="ProductColour_Product", Storage="_ProductColour", ThisKey="ColourId", OtherKey="ProductColourId", IsForeignKey=true)]
		public ProductColour ProductColour
		{
			get
			{
				return this._ProductColour.Entity;
			}
			set
			{
				ProductColour previousValue = this._ProductColour.Entity;
				if (((previousValue != value) 
							|| (this._ProductColour.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductColour.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductColour.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ColourId = value.ProductColourId;
					}
					else
					{
						this._ColourId = default(int);
					}
					this.SendPropertyChanged("ProductColour");
				}
			}
		}
		
		[Association(Name="ProductImage_Product", Storage="_ProductImage", ThisKey="ProductImageId", OtherKey="ProductImageId", IsForeignKey=true)]
		public ProductImage ProductImage
		{
			get
			{
				return this._ProductImage.Entity;
			}
			set
			{
				ProductImage previousValue = this._ProductImage.Entity;
				if (((previousValue != value) 
							|| (this._ProductImage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductImage.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductImage.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._ProductImageId = value.ProductImageId;
					}
					else
					{
						this._ProductImageId = default(int);
					}
					this.SendPropertyChanged("ProductImage");
				}
			}
		}
		
		[Association(Name="ProductSize_Product", Storage="_ProductSize", ThisKey="SizeId", OtherKey="ProductSizeId", IsForeignKey=true)]
		public ProductSize ProductSize
		{
			get
			{
				return this._ProductSize.Entity;
			}
			set
			{
				ProductSize previousValue = this._ProductSize.Entity;
				if (((previousValue != value) 
							|| (this._ProductSize.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductSize.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductSize.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._SizeId = value.ProductSizeId;
					}
					else
					{
						this._SizeId = default(Nullable<int>);
					}
					this.SendPropertyChanged("ProductSize");
				}
			}
		}
		
		[Association(Name="ProductWeight_Product", Storage="_ProductWeight", ThisKey="WeightId", OtherKey="ProductWeightId", IsForeignKey=true)]
		public ProductWeight ProductWeight
		{
			get
			{
				return this._ProductWeight.Entity;
			}
			set
			{
				ProductWeight previousValue = this._ProductWeight.Entity;
				if (((previousValue != value) 
							|| (this._ProductWeight.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductWeight.Entity = null;
						previousValue.Products.Remove(this);
					}
					this._ProductWeight.Entity = value;
					if ((value != null))
					{
						value.Products.Add(this);
						this._WeightId = value.ProductWeightId;
					}
					else
					{
						this._WeightId = default(int);
					}
					this.SendPropertyChanged("ProductWeight");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_ShoppingCarts(ShoppingCart entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
		
		private void attach_Showcases(Showcase entity)
		{
			this.SendPropertyChanging();
			entity.Product = this;
		}
		
		private void detach_Showcases(Showcase entity)
		{
			this.SendPropertyChanging();
			entity.Product = null;
		}
	}
	
	[Table(Name="dbo.ProductSize")]
	public partial class ProductSize : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductSizeId;
		
		private string _ProductSizeName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductSizeIdChanging(int value);
    partial void OnProductSizeIdChanged();
    partial void OnProductSizeNameChanging(string value);
    partial void OnProductSizeNameChanged();
    #endregion
		
		public ProductSize()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ProductSizeId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductSizeId
		{
			get
			{
				return this._ProductSizeId;
			}
			set
			{
				if ((this._ProductSizeId != value))
				{
					this.OnProductSizeIdChanging(value);
					this.SendPropertyChanging();
					this._ProductSizeId = value;
					this.SendPropertyChanged("ProductSizeId");
					this.OnProductSizeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductSizeName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductSizeName
		{
			get
			{
				return this._ProductSizeName;
			}
			set
			{
				if ((this._ProductSizeName != value))
				{
					this.OnProductSizeNameChanging(value);
					this.SendPropertyChanging();
					this._ProductSizeName = value;
					this.SendPropertyChanged("ProductSizeName");
					this.OnProductSizeNameChanged();
				}
			}
		}
		
		[Association(Name="ProductSize_Product", Storage="_Products", ThisKey="ProductSizeId", OtherKey="SizeId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductSize = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductSize = null;
		}
	}
	
	[Table(Name="dbo.ProductSizeLink")]
	public partial class ProductSizeLink
	{
		
		private int _ProductId;
		
		private int _ProductSizeId;
		
		private int _StockLevel;
		
		public ProductSizeLink()
		{
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					this._ProductId = value;
				}
			}
		}
		
		[Column(Storage="_ProductSizeId", DbType="Int NOT NULL")]
		public int ProductSizeId
		{
			get
			{
				return this._ProductSizeId;
			}
			set
			{
				if ((this._ProductSizeId != value))
				{
					this._ProductSizeId = value;
				}
			}
		}
		
		[Column(Storage="_StockLevel", DbType="Int NOT NULL")]
		public int StockLevel
		{
			get
			{
				return this._StockLevel;
			}
			set
			{
				if ((this._StockLevel != value))
				{
					this._StockLevel = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.ProductWeight")]
	public partial class ProductWeight : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProductWeightId;
		
		private string _ProductWeightName;
		
		private EntitySet<Product> _Products;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProductWeightIdChanging(int value);
    partial void OnProductWeightIdChanged();
    partial void OnProductWeightNameChanging(string value);
    partial void OnProductWeightNameChanged();
    #endregion
		
		public ProductWeight()
		{
			this._Products = new EntitySet<Product>(new Action<Product>(this.attach_Products), new Action<Product>(this.detach_Products));
			OnCreated();
		}
		
		[Column(Storage="_ProductWeightId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ProductWeightId
		{
			get
			{
				return this._ProductWeightId;
			}
			set
			{
				if ((this._ProductWeightId != value))
				{
					this.OnProductWeightIdChanging(value);
					this.SendPropertyChanging();
					this._ProductWeightId = value;
					this.SendPropertyChanged("ProductWeightId");
					this.OnProductWeightIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductWeightName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ProductWeightName
		{
			get
			{
				return this._ProductWeightName;
			}
			set
			{
				if ((this._ProductWeightName != value))
				{
					this.OnProductWeightNameChanging(value);
					this.SendPropertyChanging();
					this._ProductWeightName = value;
					this.SendPropertyChanged("ProductWeightName");
					this.OnProductWeightNameChanged();
				}
			}
		}
		
		[Association(Name="ProductWeight_Product", Storage="_Products", ThisKey="ProductWeightId", OtherKey="WeightId")]
		public EntitySet<Product> Products
		{
			get
			{
				return this._Products;
			}
			set
			{
				this._Products.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductWeight = this;
		}
		
		private void detach_Products(Product entity)
		{
			this.SendPropertyChanging();
			entity.ProductWeight = null;
		}
	}
	
	[Table(Name="dbo.ShoppingCart")]
	public partial class ShoppingCart : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShoppingCartId;
		
		private string _CartGUID;
		
		private int _Quantity;
		
		private string _ProductSize;
		
		private System.Nullable<int> _ProductSizeId;
		
		private int _ProductId;
		
		private System.DateTime _DateCreated;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShoppingCartIdChanging(int value);
    partial void OnShoppingCartIdChanged();
    partial void OnCartGUIDChanging(string value);
    partial void OnCartGUIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnProductSizeChanging(string value);
    partial void OnProductSizeChanged();
    partial void OnProductSizeIdChanging(System.Nullable<int> value);
    partial void OnProductSizeIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    partial void OnDateCreatedChanging(System.DateTime value);
    partial void OnDateCreatedChanged();
    #endregion
		
		public ShoppingCart()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ShoppingCartId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShoppingCartId
		{
			get
			{
				return this._ShoppingCartId;
			}
			set
			{
				if ((this._ShoppingCartId != value))
				{
					this.OnShoppingCartIdChanging(value);
					this.SendPropertyChanging();
					this._ShoppingCartId = value;
					this.SendPropertyChanged("ShoppingCartId");
					this.OnShoppingCartIdChanged();
				}
			}
		}
		
		[Column(Storage="_CartGUID", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string CartGUID
		{
			get
			{
				return this._CartGUID;
			}
			set
			{
				if ((this._CartGUID != value))
				{
					this.OnCartGUIDChanging(value);
					this.SendPropertyChanging();
					this._CartGUID = value;
					this.SendPropertyChanged("CartGUID");
					this.OnCartGUIDChanged();
				}
			}
		}
		
		[Column(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[Column(Storage="_ProductSize", DbType="NVarChar(50)")]
		public string ProductSize
		{
			get
			{
				return this._ProductSize;
			}
			set
			{
				if ((this._ProductSize != value))
				{
					this.OnProductSizeChanging(value);
					this.SendPropertyChanging();
					this._ProductSize = value;
					this.SendPropertyChanged("ProductSize");
					this.OnProductSizeChanged();
				}
			}
		}
		
		[Column(Storage="_ProductSizeId", DbType="Int")]
		public System.Nullable<int> ProductSizeId
		{
			get
			{
				return this._ProductSizeId;
			}
			set
			{
				if ((this._ProductSizeId != value))
				{
					this.OnProductSizeIdChanging(value);
					this.SendPropertyChanging();
					this._ProductSizeId = value;
					this.SendPropertyChanged("ProductSizeId");
					this.OnProductSizeIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Column(Storage="_DateCreated", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateCreated
		{
			get
			{
				return this._DateCreated;
			}
			set
			{
				if ((this._DateCreated != value))
				{
					this.OnDateCreatedChanging(value);
					this.SendPropertyChanging();
					this._DateCreated = value;
					this.SendPropertyChanged("DateCreated");
					this.OnDateCreatedChanged();
				}
			}
		}
		
		[Association(Name="Product_ShoppingCart", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.ShoppingCarts.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.ShoppingCarts.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Showcase")]
	public partial class Showcase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShowcaseId;
		
		private int _PageId;
		
		private int _ProductId;
		
		private EntityRef<Product> _Product;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShowcaseIdChanging(int value);
    partial void OnShowcaseIdChanged();
    partial void OnPageIdChanging(int value);
    partial void OnPageIdChanged();
    partial void OnProductIdChanging(int value);
    partial void OnProductIdChanged();
    #endregion
		
		public Showcase()
		{
			this._Product = default(EntityRef<Product>);
			OnCreated();
		}
		
		[Column(Storage="_ShowcaseId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShowcaseId
		{
			get
			{
				return this._ShowcaseId;
			}
			set
			{
				if ((this._ShowcaseId != value))
				{
					this.OnShowcaseIdChanging(value);
					this.SendPropertyChanging();
					this._ShowcaseId = value;
					this.SendPropertyChanged("ShowcaseId");
					this.OnShowcaseIdChanged();
				}
			}
		}
		
		[Column(Storage="_PageId", DbType="Int NOT NULL")]
		public int PageId
		{
			get
			{
				return this._PageId;
			}
			set
			{
				if ((this._PageId != value))
				{
					this.OnPageIdChanging(value);
					this.SendPropertyChanging();
					this._PageId = value;
					this.SendPropertyChanged("PageId");
					this.OnPageIdChanged();
				}
			}
		}
		
		[Column(Storage="_ProductId", DbType="Int NOT NULL")]
		public int ProductId
		{
			get
			{
				return this._ProductId;
			}
			set
			{
				if ((this._ProductId != value))
				{
					if (this._Product.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductIdChanging(value);
					this.SendPropertyChanging();
					this._ProductId = value;
					this.SendPropertyChanged("ProductId");
					this.OnProductIdChanged();
				}
			}
		}
		
		[Association(Name="Product_Showcase", Storage="_Product", ThisKey="ProductId", OtherKey="ProductId", IsForeignKey=true)]
		public Product Product
		{
			get
			{
				return this._Product.Entity;
			}
			set
			{
				Product previousValue = this._Product.Entity;
				if (((previousValue != value) 
							|| (this._Product.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Product.Entity = null;
						previousValue.Showcases.Remove(this);
					}
					this._Product.Entity = value;
					if ((value != null))
					{
						value.Showcases.Add(this);
						this._ProductId = value.ProductId;
					}
					else
					{
						this._ProductId = default(int);
					}
					this.SendPropertyChanged("Product");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
